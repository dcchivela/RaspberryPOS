// This file is generated by kconfig_compiler from squeeze.kcfg.
// All changes you do to this file will be lost.
#ifndef SETTINGS_H
#define SETTINGS_H

#include <kconfigskeleton.h>
#include <kdebug.h>

class Settings : public KConfigSkeleton
{
  public:

    static Settings *self();
    ~Settings();

    /**
      Set How the main window is divided.
    */
    static
    void setSplitterSizes( const QList<int> & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "SplitterSizes" ) ))
        self()->mSplitterSizes = v;
    }

    /**
      Get How the main window is divided.
    */
    static
    QList<int> splitterSizes()
    {
      return self()->mSplitterSizes;
    }

    /**
      Set The default view for products
    */
    static
    void setIsProductsGridDefault( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "isProductsGridDefault" ) ))
        self()->mIsProductsGridDefault = v;
    }

    /**
      Get The default view for products
    */
    static
    bool isProductsGridDefault()
    {
      return self()->mIsProductsGridDefault;
    }

    /**
      Set Most Sold products filter Max value
    */
    static
    void setMostSoldMaxValue( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "mostSoldMaxValue" ) ))
        self()->mMostSoldMaxValue = v;
    }

    /**
      Get Most Sold products filter Max value
    */
    static
    int mostSoldMaxValue()
    {
      return self()->mMostSoldMaxValue;
    }

    /**
      Set Most Sold products filter Main value
    */
    static
    void setMostSoldMinValue( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "mostSoldMinValue" ) ))
        self()->mMostSoldMinValue = v;
    }

    /**
      Get Most Sold products filter Main value
    */
    static
    int mostSoldMinValue()
    {
      return self()->mMostSoldMinValue;
    }

    /**
      Set Get Stylesheet Name
    */
    static
    void setStyleName( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "styleName" ) ))
        self()->mStyleName = v;
    }

    /**
      Get Get Stylesheet Name
    */
    static
    QString styleName()
    {
      return self()->mStyleName;
    }

    /**
      Set Low security mode
    */
    static
    void setLowSecurityMode( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "lowSecurityMode" ) ))
        self()->mLowSecurityMode = v;
    }

    /**
      Get Low security mode
    */
    static
    bool lowSecurityMode()
    {
      return self()->mLowSecurityMode;
    }

    /**
      Set DB Server Name
    */
    static
    void setEditDBServer( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "editDBServer" ) ))
        self()->mEditDBServer = v;
    }

    /**
      Get DB Server Name
    */
    static
    QString editDBServer()
    {
      return self()->mEditDBServer;
    }

    /**
      Set DB Username
    */
    static
    void setEditDBUsername( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "editDBUsername" ) ))
        self()->mEditDBUsername = v;
    }

    /**
      Get DB Username
    */
    static
    QString editDBUsername()
    {
      return self()->mEditDBUsername;
    }

    /**
      Set DB Password
    */
    static
    void setEditDBPassword( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "editDBPassword" ) ))
        self()->mEditDBPassword = v;
    }

    /**
      Get DB Password
    */
    static
    QString editDBPassword()
    {
      return self()->mEditDBPassword;
    }

    /**
      Set DB Name
    */
    static
    void setEditDBName( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "editDBName" ) ))
        self()->mEditDBName = v;
    }

    /**
      Get DB Name
    */
    static
    QString editDBName()
    {
      return self()->mEditDBName;
    }

    /**
      Set Show a dialog when printing the ticket
    */
    static
    void setShowDialogOnPrinting( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "showDialogOnPrinting" ) ))
        self()->mShowDialogOnPrinting = v;
    }

    /**
      Get Show a dialog when printing the ticket
    */
    static
    bool showDialogOnPrinting()
    {
      return self()->mShowDialogOnPrinting;
    }

    /**
      Set Time showing the ticket dialog
    */
    static
    void setTicketTime( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ticketTime" ) ))
        self()->mTicketTime = v;
    }

    /**
      Get Time showing the ticket dialog
    */
    static
    int ticketTime()
    {
      return self()->mTicketTime;
    }

    /**
      Set Print a small receipt using a ticket printer -dot matrix-.
    */
    static
    void setSmallTicketDotMatrix( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "smallTicketDotMatrix" ) ))
        self()->mSmallTicketDotMatrix = v;
    }

    /**
      Get Print a small receipt using a ticket printer -dot matrix-.
    */
    static
    bool smallTicketDotMatrix()
    {
      return self()->mSmallTicketDotMatrix;
    }

    /**
      Set Print a small receipt using a thermal ticket printer -CUPS-
    */
    static
    void setSmallTicketCUPS( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "smallTicketCUPS" ) ))
        self()->mSmallTicketCUPS = v;
    }

    /**
      Get Print a small receipt using a thermal ticket printer -CUPS-
    */
    static
    bool smallTicketCUPS()
    {
      return self()->mSmallTicketCUPS;
    }

    /**
      Set Print a big receipt using a normal printer
    */
    static
    void setBigReceipt( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "bigReceipt" ) ))
        self()->mBigReceipt = v;
    }

    /**
      Get Print a big receipt using a normal printer
    */
    static
    bool bigReceipt()
    {
      return self()->mBigReceipt;
    }

    /**
      Set Print balances using ticket printer
    */
    static
    void setPrintBalances( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "printBalances" ) ))
        self()->mPrintBalances = v;
    }

    /**
      Get Print balances using ticket printer
    */
    static
    bool printBalances()
    {
      return self()->mPrintBalances;
    }

    /**
      Set Print Ticket (dou you have a ticket printer?)
    */
    static
    void setPrintTicket( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "printTicket" ) ))
        self()->mPrintTicket = v;
    }

    /**
      Get Print Ticket (dou you have a ticket printer?)
    */
    static
    bool printTicket()
    {
      return self()->mPrintTicket;
    }

    /**
      Set Print Date Changed Ticket
    */
    static
    void setPrintChangedDateTicket( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "printChangedDateTicket" ) ))
        self()->mPrintChangedDateTicket = v;
    }

    /**
      Get Print Date Changed Ticket
    */
    static
    bool printChangedDateTicket()
    {
      return self()->mPrintChangedDateTicket;
    }

    /**
      Set Get printer device to use for printing
    */
    static
    void setPrinterDevice( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "printerDevice" ) ))
        self()->mPrinterDevice = v;
    }

    /**
      Get Get printer device to use for printing
    */
    static
    QString printerDevice()
    {
      return self()->mPrinterDevice;
    }

    /**
      Set Get Printer Codec to use
    */
    static
    void setPrinterCodec( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "printerCodec" ) ))
        self()->mPrinterCodec = v;
    }

    /**
      Get Get Printer Codec to use
    */
    static
    QString printerCodec()
    {
      return self()->mPrinterCodec;
    }

  protected:
    Settings();
    friend class SettingsHelper;


    // squeezeView
    QList<int> mSplitterSizes;
    bool mIsProductsGridDefault;

    // QuickView
    int mMostSoldMaxValue;
    int mMostSoldMinValue;

    // Styles
    QString mStyleName;

    // Security
    bool mLowSecurityMode;

    // Database
    QString mEditDBServer;
    QString mEditDBUsername;
    QString mEditDBPassword;
    QString mEditDBName;

    // Printer
    bool mShowDialogOnPrinting;
    int mTicketTime;
    bool mSmallTicketDotMatrix;
    bool mSmallTicketCUPS;
    bool mBigReceipt;
    bool mPrintBalances;
    bool mPrintTicket;
    bool mPrintChangedDateTicket;
    QString mPrinterDevice;
    QString mPrinterCodec;

  private:
};

#endif

